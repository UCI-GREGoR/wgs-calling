# The main entry point of your workflow.
# After configuring, running snakemake -n in a clone of this repository should successfully execute a dry-run of the workflow.

import os
import pathlib
import pandas as pd
from snakemake.remote.S3 import RemoteProvider as S3RemoteProvider
from snakemake.remote.HTTP import RemoteProvider as HTTPRemoteProvider
from snakemake.utils import validate

S3 = S3RemoteProvider()

sys.path.insert(0, ".")
from lib import resource_calculator as rc
from lib import target_construction as tc

shell.executable("/bin/bash")
shell.prefix("set -euo pipefail; ")


configfile: "config/config.yaml"


validate(config, "../schema/global_config_schema.yaml")

tempDir = "temp"
manifest = config["manifest"]
manifest = pd.read_csv(manifest, sep="\t")


validate(manifest, "../schema/manifest_schema.yaml")

reference_build = config["genome-build"]
aligner_index_suffixes = {}
aligner_index_suffixes["bwa"] = ["ann", "amb", "bwt", "pac", "sa"]
aligner_index_suffixes["bwa-mem2"] = ["ann", "amb", "bwt.2bit.64", "pac", "sa"]

caller_num_intervals = tc.caller_interval_file_count(config)

TARGETS = [
    expand(
        "results/multiqc/{projectid}/multiqc.{runtype}.html",
        projectid=list(manifest["projectid"].unique()),
        runtype="fastq",
    ),
]

if config["behaviors"]["outcome"] != "fastqc":
    TARGETS.append(
        [
            expand(
                "results/multiqc/{projectid}/multiqc.{runtype}.html",
                projectid=list(manifest["projectid"].unique()),
                runtype="alignment",
            )
        ]
    )

if config["behaviors"]["outcome"] == "calling":
    TARGETS.append(
        [
            tc.construct_snv_targets(config, manifest),
        ]
    )
    TARGETS.append(
        [
            tc.construct_sv_targets(manifest),
        ]
    )
    TARGETS.append(
        expand(
            "results/reports/{projectid}/sv_caller_comparison.html",
            projectid=list(set(manifest["projectid"])),
        )
    )


## To deal with the fact that s3 remote provider service is very slow
## and sometimes buggy, while not interfering with a streamlined
## reference file naming convention, I'll use a snakemake functionality
## for resolving ambiguous rule determination that I really dislike otherwise.
## This is flagged for possible better resolution in the future.
ruleorder: samtools_index_fasta > download_reference_data
ruleorder: index_vcf > download_reference_data
ruleorder: create_sequence_dictionary > download_reference_data
ruleorder: adjust_fasta_formatting > download_reference_data
ruleorder: octopus_run_task > index_vcf
ruleorder: manta_run > index_vcf


rule all:
    input:
        TARGETS,


include: "rules/acquire_data.smk"
include: "rules/alignstats.smk"
include: "rules/bqsr.smk"
include: "rules/bwamem.smk"
include: "rules/deepvariant.smk"
include: "rules/delly.smk"
include: "rules/duphold.smk"
include: "rules/ensemble_sv_calling.smk"
include: "rules/fastp.smk"
include: "rules/fastqc.smk"
include: "rules/lumpy.smk"
include: "rules/manta.smk"
include: "rules/methods.smk"
include: "rules/mosdepth.smk"
include: "rules/multiqc.smk"

include: "rules/performance_benchmarks.smk"
include: "rules/picard.smk"
include: "rules/references.smk"
include: "rules/somalier.smk"
include: "rules/svaba.smk"
include: "rules/svdb.smk"

include: "rules/verifybamid2.smk"
