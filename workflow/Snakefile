# The main entry point of your workflow.
# After configuring, running snakemake -n in a clone of this repository should successfully execute a dry-run of the workflow.

import os
import pathlib
import pandas as pd
from snakemake.remote.S3 import RemoteProvider as S3RemoteProvider
from snakemake.remote.HTTP import RemoteProvider as HTTPRemoteProvider
from snakemake.utils import validate
import subprocess
import yaml

S3 = S3RemoteProvider()

sys.path.insert(0, ".")
from lib import export_data as ed
from lib import resource_calculator as rc
from lib import string_manipulations as sm
from lib import target_construction as tc

shell.executable("/bin/bash")
shell.prefix("set -euo pipefail; ")

try:
    pipeline_version = subprocess.check_output(
        ["git", "describe", "--tags", "HEAD"], encoding="UTF-8"
    ).strip()
except subprocess.CalledProcessError:
    pipeline_version = "{version not detected}"
print("wgs-pipeline version {}".format(pipeline_version))


configfile: "config/config.yaml"


with open("config/config_resources.yaml", "r") as f:
    config_resources = yaml.safe_load(f)

validate(config, "../schema/global_config_schema.yaml")
validate(config_resources, "../schema/resources_config_schema.yaml")

tempDir = config_resources["tmpdir"]
manifest = config["manifest"]
manifest = pd.read_csv(manifest, sep="\t")
## note that this variable controls container usage for everything *except DeepVariant*,
## which currently does not have a conda alternative.
use_containers = config["behaviors"]["use-containers"]

validate(manifest, "../schema/manifest_schema.yaml")

sample_linking_sex = None
sample_linking_external_ids = None
if "sample-linking" in config:
    if "sex" in config["sample-linking"]:
        sample_linking_sex = pd.read_table(config["sample-linking"]["sex"], sep="\t")
        validate(sample_linking_sex, "../schema/sample_linking_sex_schema.yaml")
    if "external-ids" in config["sample-linking"]:
        sample_linking_external_ids = pd.read_table(
            config["sample-linking"]["external-ids"], sep="\t"
        )
        validate(sample_linking_external_ids, "../schema/sample_linking_external_ids_schema.yaml")


reference_build = config["genome-build"]
apptainer_images = config["apptainer-image-dir"] if "apptainer-image-dir" in config else "."
aligner_index_suffixes = {}
aligner_index_suffixes["bwa"] = ["ann", "amb", "bwt", "pac", "sa"]
aligner_index_suffixes["bwa-mem2"] = ["ann", "amb", "bwt.2bit.64", "pac", "sa"]

caller_num_intervals = tc.caller_interval_file_count(config)

unique_projects = list(manifest["projectid"].unique())

TARGETS = []

if "combined-lanes" in config["behaviors"]["qc-type"]:
    TARGETS.extend(
        [
            "results/multiqc/{}/multiqc.combined-lanes.{}.fastq.html".format(projectid, projectid)
            for projectid in unique_projects
        ]
    )
if "lane-specific" in config["behaviors"]["qc-type"]:
    TARGETS.extend(
        [
            "results/multiqc/{}/multiqc.lane-specific.{}.fastq.html".format(projectid, projectid)
            for projectid in unique_projects
        ]
    )

if config["behaviors"]["outcome"] != "fastqc":
    if "combined-lanes" in config["behaviors"]["qc-type"]:
        TARGETS.extend(
            [
                "results/multiqc/{}/multiqc.combined-lanes.{}.alignment.html".format(
                    projectid, projectid
                )
                for projectid in unique_projects
            ]
        )
    if "lane-specific" in config["behaviors"]["qc-type"]:
        TARGETS.extend(
            [
                "results/multiqc/{}/multiqc.lane-specific.{}.alignment.html".format(
                    projectid, projectid
                )
                for projectid in unique_projects
            ]
        )


if config["behaviors"]["outcome"] != "fastqc" and config["behaviors"]["outcome"] != "alignment":
    TARGETS.append(
        [
            tc.construct_snv_targets(config, manifest),
        ]
    )
    TARGETS.append(
        [
            tc.construct_sv_targets(manifest),
        ]
    )
    TARGETS.append(
        expand(
            "results/reports/{projectid}/sv_caller_comparison.html",
            projectid=list(set(manifest["projectid"])),
        )
    )

if config["behaviors"]["outcome"] == "release":
    TARGETS.append(
        expand(
            "results/export/{projectid}/{filename}",
            projectid=list(set(manifest["projectid"])),
            filename=["manifest.tsv", "methods_summary.html"],
        )
    )
    TARGETS.append(
        expand(
            "results/nonexport/{projectid}/manifest.tsv",
            projectid=list(set(manifest["projectid"])),
        )
    )
    if "export-directory" in config["behaviors"]:
        if config["behaviors"]["export-directory"] is not None:
            TARGETS.append(
                expand(
                    "results/export/{projectid}/md5_checks.txt",
                    projectid=list(set(manifest["projectid"])),
                )
            )
    if "export-s3" in config["behaviors"]:
        if config["behaviors"]["export-s3"] is not None:
            TARGETS.append(
                expand(
                    "results/{resultdir}/{projectid}/s3_transfer_complete.txt",
                    resultdir=["export", "fastqs"],
                    projectid=list(set(manifest["projectid"])),
                )
            )


## To deal with the fact that s3 remote provider service is very slow
## and sometimes buggy, while not interfering with a streamlined
## reference file naming convention, I'll use a snakemake functionality
## for resolving ambiguous rule determination that I really dislike otherwise.
## This is flagged for possible better resolution in the future.
ruleorder: samtools_index_fasta > download_reference_data
ruleorder: index_vcf > download_reference_data
ruleorder: create_sequence_dictionary > download_reference_data
ruleorder: adjust_fasta_formatting > download_reference_data
ruleorder: manta_run > index_vcf


rule all:
    input:
        TARGETS,


include: "rules/acquire_data.smk"
include: "rules/alignstats.smk"
include: "rules/bqsr.smk"
include: "rules/bwamem.smk"
include: "rules/combine_fastqs.smk"
include: "rules/deepvariant.smk"
include: "rules/delly.smk"
include: "rules/duphold.smk"
include: "rules/ensemble_sv_calling.smk"
include: "rules/export_data.smk"
include: "rules/fastp.smk"
include: "rules/fastqc.smk"
include: "rules/lumpy.smk"
include: "rules/manta.smk"
include: "rules/methods.smk"
include: "rules/mosdepth.smk"
include: "rules/multiqc.smk"
include: "rules/performance_benchmarks.smk"
include: "rules/picard.smk"
include: "rules/prepare_fastqs.smk"
include: "rules/references.smk"
include: "rules/somalier.smk"
include: "rules/svaba.smk"
include: "rules/{}.smk".format(config["behaviors"]["sv-ensemble"]["merge-tool"])

include: "rules/verifybamid2.smk"
